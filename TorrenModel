# File Name: Black Jack Model
# Author: Torryn Carey-Jarrell
#
# Model game for black jack

import random

testingBool = False

class Card:
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value

    # def __repr__(self):
    # return str(self.value) + " of " + str(self.suit)

    # A repr that converts integer cards into "value of suit" where
    # value consists of Ace, 2, 3, ... King and the Suits are Hearts,
    # Diamonds, Clubs, Spades
    def __repr__(self):
        returnString = ""
        if self.getValue() == 1:
            returnString += "Ace"
        elif self.getValue() == 11:
            returnString += "Jack"
        elif self.getValue() == 12:
            returnString += "Queen"
        elif self.getValue() == 13:
            returnString += "King"
        else:
            returnString += str(self.getValue())

        returnString += " of "

        if self.getSuit() == 1:
            returnString += "Hearts"
        elif self.getSuit() == 2:
            returnString += "Diamonds"
        elif self.getSuit() == 3:
            returnString += "Clubs"
        elif self.getSuit() == 4:
            returnString += "Spades"

        return returnString

    def getSuit(self):
        return self.suit

    def getValue(self):
        return self.value


# Deck class that takes a number of decks and creates one deck that
# incorporates all 52 cards from each requested deck. Each deck is
# composed of cards (ace to king) of each of the four suits (hearts,
# diamonds, clubs and spades in that numeric order) also provides
# the functionality for shuffling the deck and giving cards from the
# deck, popping them off the stack
class Deck:
    #                 A  1  2  3  4  5  6  7  8  9  J  Q  K
    cardsUsed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    totalCardsInDeck = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    def __init__(self, numDecks):
        # 1 is hearts, 2 is diamonds, 3 is clubs, 4 is spades
        suits = [1, 2, 3, 4]
        value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

        self.cards = []
        numMade = 0

        while numMade < numDecks:
            for suit in suits:
                for num in value:
                    self.cards.append(Card(suit, num))
            numMade += 1
            self.incrementTotalCardsInDeck()

    def getCards(self):
        return self.cards

    def addDecks(self, numDecks):
        deck = Deck(numDecks)
        for card in deck.cards:
            self.cards.append(card)

    def getSize(self):
        return len(self.cards)

    def __repr__(self):
        return "Deck containing " + str(len(self.cards)) + " cards."

    def shuffle(self):
        random.shuffle(self.cards)

    def giveCard(self):
        card = self.cards.pop(0)
        self.countCards(card)
        return card

    def incrementTotalCardsInDeck(self):
        for i in range(len(self.totalCardsInDeck)):
            self.totalCardsInDeck[i] += 4

    def countCards(self, cardAdded):
        self.cardsUsed[cardAdded.getValue() - 1] += 1

    def printDeck(self):
        print("Total cards ever in Deck: " + str(sum(self.totalCardsInDeck)))
        print("Total cards found: " + str(sum(self.cardsUsed)))
        print("Total cards left: " + str(len(self.cards)))
        print("Ace - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - J - Q - K")
        print(self.cardsUsed)

    def getNumBustCards(self, playerTotal):
        print(playerTotal)
        bustNumber = 21 - playerTotal
        print(bustNumber)

        if bustNumber > 10:
            return 0
        else:

            numBustCards = 0
            x = bustNumber + 1
            while x < len(self.totalCardsInDeck):
                print("X Value: " + str(x))
                print("Card " + str(x) + " has " + str(self.totalCardsInDeck[x]) + " total")
                print("and has been used " + str(self.cardsUsed[x]) + " times")
                numBustCards += self.totalCardsInDeck[x] - self.cardsUsed[x]
                print(self.totalCardsInDeck[x] - self.cardsUsed[x])
                x += 1

        print(numBustCards, sum(self.totalCardsInDeck))
        return numBustCards

    def resetClassVariables(self):
        Deck.cardsUsed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        Deck.totalCardsInDeck = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


class Hand:
    def __init__(self):
        self.cards = []

    def __repr__(self):
        return repr(self.cards)

    def draw(self, deck):
        self.cards.append(deck.giveCard())

    def addCard(self, value, suit):
        self.cards.append(Card(suit, value))

    def countHand(self):
        totalValue = 0
        numAces = 0

        if testingBool == True:
            print("START OF COUNT")
            print("HAND PROVIDED HAS " + repr(self.cards))

        for x in self.cards:
            if x.getValue() == 1:
                numAces += 1
            elif x.getValue() >= 10:
                totalValue += 10
            else:
                totalValue += x.getValue()

        if testingBool == True:
            print("In hand " + str(numAces) + " were found!")
            print()

        totalValue += numAces

        numCounted = 0
        numUsed = 0

        while numCounted != numAces:
            tempValue = totalValue
            if tempValue + 10 > 21:
                if testingBool == True:
                    print("Ace found but could not be used without going over 21")
                    print("Current Value: " + str(tempValue))
                    print("Value with ace: " + str(tempValue + 10))
                    print()

                numCounted += 1
            else:
                if testingBool == True:
                    print("Ace could be used!")
                    print("Past Value: " + str(tempValue))
                    print("Current Value: " + str(tempValue + 10))
                    print()
                totalValue += 10
                numUsed += 1
                numCounted += 1

            if testingBool == True:
                print("Number of Aces is " + str(numAces) + " while we have counted " + str(
                    numCounted) + " and used " + str(numUsed))

        if numUsed > 0:
            return totalValue, True
        else:
            return totalValue, False

class BlackjackGame:
    def __init__(self, num_decks=6, starting_balance=100, algoNum):
        self.deck = Deck(num_decks)
        self.human_hand = Hand()
        self.computer_hand = Hand()
        self.dealer_hand = Hand()
        self.balance = starting_balance
        self.bet = 0

        self.algorithm = algoNum

        # Win is a 1, loss is a 2, zero means it hasn't been determined yet
        self.humanPlayerWins = 0
        self.computerPlayerWins = 0
        self.humanPlayerTurnDone = False
        self.computerPlayerTurnDone = False

    def getHumanPlayerWin(self):
        return self.humanPlayerWins

    def getComputerPlayerWin(self):
        return self.computerPlayerWins

    def getHumanPlayerTurn(self):
        return self.humanPlayerTurnDone

    def getComputerPlayerTurn(self):
        return self.computerPlayerTurnDone

    def setHumanPlayerWin(self, statusCode):
        self.humanPlayerWins = statusCode

    def setComputerPlayerWin(self, statusCode):
        self.computerPlayerWins = statusCode

    def setHumanPlayerTurnDone(self, boolStatus):
        self.humanPlayerTurnDone = boolStatus

    def setComputerPlayerTurnDone(self, boolStatus):
        self.computerPlayerTurnDone = boolStatus

    def start_game(self):
        #print("\n--- Starting a New Game ---")
        #self.player_hand = Hand()
        #self.dealer_hand = Hand()

        # Place bet
        #breakFromLoop = False
        #while not breakFromLoop:
            #
            #self.bet = int(input(f"Place your bet (Current balance: ${self.balance}): "))
            #if self.bet > self.balance:
            #    print("Insufficient balance to place that bet.")
            #else:
            #    breakFromLoop = True
        """
        Need to add function for betting or decide on default bet
        """

        # Initial dealing
        self.human_hand.draw(self.deck)
        self.dealer_hand.draw(self.deck)
        self.computer_hand.draw(self.deck)
        self.human_hand.draw(self.deck)
        self.dealer_hand.draw(self.deck)
        self.computer_hand.draw(self.deck)

        """
        Hands gotten by controller after start of game
        """
        #print(f"Player's Hand: {self.player_hand}")
        #print(f"Dealer's Shown Card: {self.dealer_hand.cards[0]}")

    # Stand is zero, hit is one, double down is two
    def humanPlayerInput(self, inputCode):
        if inputCode == 0:
            self.setHumanPlayerTurnDone(True)
        elif inputCode == 1:
            self.human_hand.draw(self.deck)
            humanValue, humanUsableAce = self.human_hand.countHand()

            if humanValue > 21:
                self.setHumanPlayerWin(2)
                self.setHumanPlayerTurnDone(True)
        elif inputCode == 2:
            # Double bet stored here? In controller?
            self.human_hand.draw(self.deck)
            humanValue, humanUsableAce = self.human_hand.countHand()

            if humanValue > 21:
                self.setHumanPlayerWin(2)
                self.setHumanPlayerTurnDone(True)

    def computerPlayerTurn(self):
        if self.algorithm == 1:
            # Easy difficulty
        elif self.algorithm == 2:
            # Medium difficulty
        elif self.algorithm == 3:
            # Hard difficulty


        # Player's turn
        self.player_turn()

        # Check if player busted
        if self.get_hand_value(self.player_hand) > 21:
            print("Player busts! Dealer wins.")
            self.balance -= self.bet
            return

        # Dealer's turn if player didn't bust
        self.dealer_turn()

        # Determine the game outcome
        self.check_winner()

    def player_turn(self):
        double_down = False

        while True:
            player_value = self.get_hand_value(self.player_hand)
            if player_value >= 21:
                break

            action = input("Choose action: 'hit', 'stand', or 'double down': ").strip().lower()

            if action == "hit":
                self.player_hand.draw(self.deck)
                print(f"Player's Hand: {self.player_hand}")
                player_value = self.get_hand_value(self.player_hand)
                if player_value > 21:
                    print(f"Player busts with {player_value}.")
                    break
            elif action == "stand":
                print(f"Player stands with {player_value}.")
                break
            elif action == "double down":
                if self.bet * 2 > self.balance:
                    print("Insufficient balance to double down.")
                    continue
                double_down = True
                self.bet *= 2
                self.player_hand.draw(self.deck)
                print(f"Player's Hand after Double Down: {self.player_hand}")
                break
            else:
                print("Invalid action. Please choose 'hit', 'stand', or 'double down'.")

        if double_down:
            print("Player has doubled down and will receive only one card.")

    def dealer_turn(self):
        print("\n--- Dealer's Turn ---")
        while True:
            dealer_value = self.get_hand_value(self.dealer_hand)
            print(f"Dealer's Hand: {self.dealer_hand} - Value: {dealer_value}")
            if dealer_value >= 17:
                print("Dealer stands.")
                break
            else:
                print("Dealer hits.")
                self.dealer_hand.draw(self.deck)

    def get_hand_value(self, hand):
        value, aces = hand.countHand()
        return value

    def check_winner(self):
        player_value = self.get_hand_value(self.player_hand)
        dealer_value = self.get_hand_value(self.dealer_hand)

        print(f"\nFinal Player Value: {player_value}")
        print(f"Final Dealer Value: {dealer_value}")

        if player_value > 21:
            print("Player busts! Dealer wins.")
            self.balance -= self.bet
        elif dealer_value > 21:
            print("Dealer busts! Player wins.")
            self.balance += self.bet
        elif player_value > dealer_value:
            print("Player wins!")
            self.balance += self.bet
        elif player_value < dealer_value:
            print("Dealer wins!")
            self.balance -= self.bet
        else:
            print("It's a draw!")

        print(f"Current balance: ${self.balance}")


# To run the game
game = BlackjackGame()
while game.balance > 0:
    game.start_game()
    if input("Play another round? (yes/no): ").strip().lower() != "yes":
        break
print("Thanks for playing!")
